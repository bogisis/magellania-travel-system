#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å Vite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

const { spawn } = require('child_process')
const path = require('path')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ API —Å–µ—Ä–≤–µ—Ä
const isPortInUse = (port) => {
  try {
    require('net').createServer().listen(port).close()
    return false
  } catch (e) {
    return true
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞
function startApiServer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...')
  
  const apiPath = path.join(__dirname, 'api-server', 'working-server.js')
  
  const apiProcess = spawn('node', [apiPath], {
    stdio: 'inherit',
    shell: true,
    env: { ...process.env, NODE_ENV: 'development' }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  apiProcess.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:', error.message)
    process.exit(1)
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  apiProcess.on('close', (code) => {
    if (code !== 0) {
      console.error(`‚ùå API —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`)
      process.exit(code)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...')
    apiProcess.kill('SIGINT')
    process.exit(0)
  })

  process.on('SIGTERM', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...')
    apiProcess.kill('SIGTERM')
    process.exit(0)
  })

  return apiProcess
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if (require.main === module) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 3001
  if (isPortInUse(3001)) {
    console.log('‚ÑπÔ∏è –ü–æ—Ä—Ç 3001 —É–∂–µ –∑–∞–Ω—è—Ç. API —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω.')
    console.log('üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost:3001/api/health')
  } else {
    startApiServer()
  }
}

module.exports = { startApiServer }
