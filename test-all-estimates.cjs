// test-all-estimates.js
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

const http = require('http')

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    http
      .get(url, (res) => {
        let data = ''
        res.on('data', (chunk) => {
          data += chunk
        })
        res.on('end', () => {
          try {
            resolve(JSON.parse(data))
          } catch (e) {
            reject(e)
          }
        })
      })
      .on('error', (err) => {
        reject(err)
      })
  })
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ (—Ç–µ –∂–µ, —á—Ç–æ –∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
function calculateRooms(hotel) {
  if (!hotel.paxCount || !hotel.accommodationType) return 0

  switch (hotel.accommodationType) {
    case 'double':
      return Math.ceil(Number(hotel.paxCount) / 2)
    case 'triple':
      return Math.ceil(Number(hotel.paxCount) / 3)
    case 'single':
    default:
      return Number(hotel.paxCount)
  }
}

function calculateHotelTotal(hotel) {
  const rooms = calculateRooms(hotel)
  return rooms * Number(hotel.pricePerRoom || 0) * Number(hotel.nights || 1)
}

function calculateDayTotal(day) {
  if (!day.activities) return 0
  return day.activities.reduce((sum, activity) => sum + Number(activity.cost || 0), 0)
}

function calculateBaseCost(estimate) {
  const hotelsCost = estimate.hotels
    .filter((hotel) => !hotel.isGuideHotel)
    .reduce((sum, hotel) => sum + calculateHotelTotal(hotel), 0)

  const activitiesCost = estimate.tourDays.reduce((sum, day) => {
    return sum + calculateDayTotal(day)
  }, 0)

  const optionalServicesCost = estimate.optionalServices.reduce((sum, service) => {
    return sum + Number(service.price || service.cost || 0)
  }, 0)

  return hotelsCost + activitiesCost + optionalServicesCost
}

function calculateMarginAmount(estimate) {
  const baseCost = calculateBaseCost(estimate)
  return (baseCost * Number(estimate.group.markup || 0)) / 100
}

function calculateFinalCost(estimate) {
  const baseCost = calculateBaseCost(estimate)
  const marginAmount = calculateMarginAmount(estimate)
  return baseCost + marginAmount
}

async function testAllEstimates() {
  try {
    console.log('üßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    console.log('='.repeat(60))

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–º–µ—Ç
    const estimates = await makeRequest('http://localhost:3001/api/estimates')

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–º–µ—Ç: ${estimates.length}`)
    console.log('')

    let totalErrors = 0
    let totalWarnings = 0

    for (const estimate of estimates) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ç—ã ID ${estimate.id}: ${estimate.name}`)

      const baseCost = calculateBaseCost(estimate)
      const marginAmount = calculateMarginAmount(estimate)
      const finalCost = calculateFinalCost(estimate)

      console.log(`   üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${baseCost}`)
      console.log(`   üìà –ú–∞—Ä–∂–∞: $${marginAmount}`)
      console.log(`   üíµ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${finalCost}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
      const errors = []
      const warnings = []

      if (baseCost <= 0) {
        errors.push('–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      }

      if (finalCost <= 0) {
        errors.push('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      }

      if (baseCost > 1000000) {
        warnings.push('–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞ (>$1M)')
      }

      if (finalCost > 1000000) {
        warnings.push('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞ (>$1M)')
      }

      if (errors.length > 0) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${errors.join(', ')}`)
        totalErrors++
      }

      if (warnings.length > 0) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings.join(', ')}`)
        totalWarnings++
      }

      if (errors.length === 0 && warnings.length === 0) {
        console.log(`   ‚úÖ –°–º–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`)
      }

      console.log('')
    }

    console.log('='.repeat(60))
    console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:')
    console.log(`   –í—Å–µ–≥–æ —Å–º–µ—Ç: ${estimates.length}`)
    console.log(`   –û—à–∏–±–æ–∫: ${totalErrors}`)
    console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${totalWarnings}`)
    console.log(`   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–º–µ—Ç: ${estimates.length - totalErrors}`)

    if (totalErrors === 0) {
      console.log('   üéâ –í—Å–µ —Å–º–µ—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!')
    } else {
      console.log('   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–º–µ—Ç:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
testAllEstimates()
