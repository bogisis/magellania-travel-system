const sqlite3 = require('sqlite3').verbose()
const path = require('path')
const fs = require('fs')

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'data/magellania.db')

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dataDir = path.dirname(dbPath)
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true })
}

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message)
    process.exit(1)
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  }
})

// –í–∫–ª—é—á–∞–µ–º foreign keys
db.run('PRAGMA foreign_keys = ON')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
function runSQL(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) {
        reject(err)
      } else {
        resolve(this)
      }
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
function querySQL(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) {
        reject(err)
      } else {
        resolve(rows)
      }
    })
  })
}

// –ú–∏–≥—Ä–∞—Ü–∏—è 003: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–π—Å–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã
async function runMigration003() {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ 003: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–π—Å–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è
    const tableInfo = await querySQL('PRAGMA table_info(estimates)')
    const existingColumns = tableInfo.map((col) => col.name)

    const newColumns = [
      'flights',
      'hotels',
      'tourDays',
      'optionalServices',
      'location',
      'tourDates',
      'groupData',
      'markup',
      'currency',
    ]

    for (const column of newColumns) {
      if (!existingColumns.includes(column)) {
        console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ: ${column}`)

        if (column === 'markup') {
          await runSQL(`ALTER TABLE estimates ADD COLUMN ${column} REAL DEFAULT 0`)
        } else if (column === 'currency') {
          await runSQL(`ALTER TABLE estimates ADD COLUMN ${column} TEXT DEFAULT 'USD'`)
        } else {
          await runSQL(`ALTER TABLE estimates ADD COLUMN ${column} TEXT DEFAULT '[]'`)
        }
      } else {
        console.log(`‚úÖ –ü–æ–ª–µ ${column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...')
    await runSQL(`
      UPDATE estimates SET
        flights = '[]',
        hotels = '[]',
        tourDays = '[]',
        optionalServices = '[]',
        location = '{}',
        tourDates = '{}',
        groupData = '{}',
        markup = 0,
        currency = 'USD'
      WHERE flights IS NULL OR flights = ''
    `)

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 003 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
async function main() {
  try {
    await runMigration003()
    console.log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error)
    process.exit(1)
  } finally {
    db.close((err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message)
      } else {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ')
      }
    })
  }
}

main()
