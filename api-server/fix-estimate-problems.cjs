#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ —Å–º–µ—Ç–∞—Ö
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
 */

const sqlite3 = require('sqlite3').verbose()
const path = require('path')

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'data/magellania.db')
const db = new sqlite3.Database(dbPath)

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function fixEstimateProblems() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –í –°–ú–ï–¢–ê–•')
  console.log('='.repeat(60))

  const results = {
    total: 0,
    fixed: 0,
    errors: [],
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const estimates = await getEstimates()
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${estimates.length}`)

    if (estimates.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–º–µ—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
      return results
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–º–µ—Ç—É
    for (const estimate of estimates) {
      results.total++
      console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã ID: ${estimate.id} - "${estimate.name}"`)

      const fixResults = await fixEstimate(estimate)

      if (fixResults.fixed) {
        results.fixed++
        console.log(`‚úÖ –°–º–µ—Ç–∞ ${estimate.id} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞`)
      } else {
        console.log(`‚ö†Ô∏è –°–º–µ—Ç–∞ ${estimate.id} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`)
      }

      if (fixResults.errors.length > 0) {
        results.errors.push({
          estimateId: estimate.id,
          estimateName: estimate.name,
          errors: fixResults.errors,
        })
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    printResults(results)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error.message)
    results.errors.push({ type: 'system', error: error.message })
  }

  return results
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
function getEstimates() {
  return new Promise((resolve, reject) => {
    const query = `
      SELECT e.*, c.name as clientName 
      FROM estimates e 
      LEFT JOIN clients c ON e.clientId = c.id 
      ORDER BY e.createdAt DESC
    `

    db.all(query, [], (err, rows) => {
      if (err) {
        reject(err)
        return
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
      const estimates = rows.map((estimate) => ({
        ...estimate,
        location: estimate.location_data
          ? JSON.parse(estimate.location_data)
          : { country: '', regions: [], cities: [], startPoint: '', endPoint: '' },
        tourDates: estimate.tour_dates_data
          ? JSON.parse(estimate.tour_dates_data)
          : { dateType: 'exact', startDate: '', endDate: '', days: 0 },
        group: estimate.group_data
          ? JSON.parse(estimate.group_data)
          : { totalPax: 0, doubleCount: 0, singleCount: 0, guidesCount: 0, markup: 0 },
        hotels: estimate.hotels_data ? JSON.parse(estimate.hotels_data) : [],
        tourDays: estimate.tour_days_data ? JSON.parse(estimate.tour_days_data) : [],
        optionalServices: estimate.optional_services_data
          ? JSON.parse(estimate.optional_services_data)
          : [],
      }))

      resolve(estimates)
    })
  })
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–º–µ—Ç—ã
 */
async function fixEstimate(estimate) {
  const results = {
    fixed: false,
    errors: [],
  }

  try {
    let needsUpdate = false
    const updatedEstimate = { ...estimate }

    // 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã (totalPax = 0)
    if (updatedEstimate.group && updatedEstimate.group.totalPax <= 0) {
      console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ totalPax —Å ${updatedEstimate.group.totalPax} –Ω–∞ 5`)
      updatedEstimate.group.totalPax = 5
      updatedEstimate.group.doubleCount = 2
      updatedEstimate.group.singleCount = 1
      updatedEstimate.group.guidesCount = 1
      updatedEstimate.group.markup = 15
      needsUpdate = true
    }

    // 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–µ–ª–µ–π
    if (updatedEstimate.hotels && Array.isArray(updatedEstimate.hotels)) {
      updatedEstimate.hotels.forEach((hotel, index) => {
        let hotelFixed = false

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!hotel.name) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.name = `–û—Ç–µ–ª—å ${index + 1}`
          hotelFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        if (!hotel.city) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.city = '–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å'
          hotelFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        if (!hotel.region) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.region = '–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å'
          hotelFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if (!hotel.accommodationType) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.accommodationType = 'double'
          hotelFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤
        if (!hotel.paxCount || hotel.paxCount <= 0) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤ –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.paxCount = 2
          hotelFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –Ω–æ–º–µ—Ä
        if (!hotel.pricePerRoom || hotel.pricePerRoom <= 0) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.pricePerRoom = 100
          hotelFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π
        if (!hotel.nights || hotel.nights <= 0) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π –æ—Ç–µ–ª—è ${index + 1}`)
          hotel.nights = 3
          hotelFixed = true
        }

        if (hotelFixed) {
          needsUpdate = true
        }
      })
    }

    // 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ç—É—Ä–∞
    if (updatedEstimate.tourDays && Array.isArray(updatedEstimate.tourDays)) {
      updatedEstimate.tourDays.forEach((day, index) => {
        let dayFixed = false

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        if (!day.city) {
          console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–Ω—è ${index + 1}`)
          day.city = '–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å'
          dayFixed = true
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        if (day.activities && Array.isArray(day.activities)) {
          day.activities.forEach((activity, actIndex) => {
            let activityFixed = false

            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (!activity.name) {
              console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ${actIndex + 1} –¥–Ω—è ${index + 1}`)
              activity.name = `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${actIndex + 1}`
              activityFixed = true
            }

            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (!activity.cost || activity.cost < 0) {
              console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ${actIndex + 1} –¥–Ω—è ${index + 1}`)
              activity.cost = 50
              activityFixed = true
            }

            if (activityFixed) {
              dayFixed = true
            }
          })
        }

        if (dayFixed) {
          needsUpdate = true
        }
      })
    }

    // 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    if (!updatedEstimate.location.country) {
      console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã`)
      updatedEstimate.location.country = '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞'
      needsUpdate = true
    }

    // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (needsUpdate) {
      await updateEstimate(updatedEstimate)
      results.fixed = true
    }
  } catch (error) {
    results.errors.push(`System error: ${error.message}`)
  }

  return results
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
function updateEstimate(estimate) {
  return new Promise((resolve, reject) => {
    const query = `
      UPDATE estimates SET
        location_data = ?,
        tour_dates_data = ?,
        group_data = ?,
        hotels_data = ?,
        tour_days_data = ?,
        optional_services_data = ?,
        updatedAt = datetime('now')
      WHERE id = ?
    `

    const params = [
      JSON.stringify(estimate.location || {}),
      JSON.stringify(estimate.tourDates || {}),
      JSON.stringify(estimate.group || {}),
      JSON.stringify(estimate.hotels || []),
      JSON.stringify(estimate.tourDays || []),
      JSON.stringify(estimate.optionalServices || []),
      estimate.id,
    ]

    db.run(query, params, function (err) {
      if (err) {
        reject(err)
      } else {
        resolve({ changes: this.changes })
      }
    })
  })
}

/**
 * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function printResults(results) {
  console.log('\n' + '='.repeat(60))
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø')
  console.log('='.repeat(60))
  console.log(`–í—Å–µ–≥–æ —Å–º–µ—Ç: ${results.total}`)
  console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${results.fixed}`)
  console.log(`–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${results.total - results.fixed}`)

  if (results.errors.length > 0) {
    console.log('\nüö® –û–®–ò–ë–ö–ò –ü–†–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò:')
    results.errors.forEach(({ estimateId, estimateName, errors }) => {
      console.log(`\n–°–º–µ—Ç–∞ ${estimateId} - "${estimateName}":`)
      errors.forEach((error) => console.log(`  ‚ùå ${error}`))
    })
  }

  if (results.fixed > 0) {
    console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!')
  } else {
    console.log('\n‚úÖ –í–°–ï –°–ú–ï–¢–´ –£–ñ–ï –í –ü–û–†–Ø–î–ö–ï')
  }

  console.log('='.repeat(60))
}

/**
 * –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function main() {
  try {
    const results = await fixEstimateProblems()

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.close((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message)
      } else {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ')
      }
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(results.errors.length === 0 ? 0 : 1)
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
main()
