#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
 */

const sqlite3 = require('sqlite3').verbose()
const path = require('path')

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'api-server/data/magellania.db')
const db = new sqlite3.Database(dbPath)

// –ò–º–ø–æ—Ä—Ç CalculationService (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Node.js)
class CalculationService {
  static safeNumber(value, defaultValue = 0) {
    if (value === null || value === undefined || value === '') {
      return defaultValue
    }
    const num = Number(value)
    return isNaN(num) ? defaultValue : num
  }

  static calculateRooms(hotel) {
    const paxCount = this.safeNumber(hotel.paxCount, 0)
    if (paxCount <= 0) return 0

    switch (hotel.accommodationType) {
      case 'double':
        return Math.ceil(paxCount / 2)
      case 'triple':
        return Math.ceil(paxCount / 3)
      case 'single':
      default:
        return paxCount
    }
  }

  static calculateHotelTotal(hotel) {
    const rooms = this.calculateRooms(hotel)
    const pricePerRoom = this.safeNumber(hotel.pricePerRoom, 0)
    const nights = this.safeNumber(hotel.nights, 1)

    if (pricePerRoom < 0) return 0
    return rooms * pricePerRoom * nights
  }

  static calculateDayTotal(day) {
    if (!day.activities || !Array.isArray(day.activities)) return 0

    return day.activities.reduce((sum, activity) => {
      return sum + this.safeNumber(activity.cost, 0)
    }, 0)
  }

  static calculateBaseCost(estimate) {
    let hotelsCost = 0
    if (estimate.hotels && Array.isArray(estimate.hotels)) {
      hotelsCost = estimate.hotels
        .filter((hotel) => !hotel.isGuideHotel)
        .reduce((sum, hotel) => {
          return sum + this.calculateHotelTotal(hotel)
        }, 0)
    }

    let activitiesCost = 0
    if (estimate.tourDays && Array.isArray(estimate.tourDays)) {
      activitiesCost = estimate.tourDays.reduce((sum, day) => {
        return sum + this.calculateDayTotal(day)
      }, 0)
    }

    return hotelsCost + activitiesCost
  }

  static calculateMarkupAmount(estimate) {
    const baseCost = this.calculateBaseCost(estimate)
    const markup = this.safeNumber(estimate.markup, 0)
    return (baseCost * markup) / 100
  }

  static calculateFinalCost(estimate) {
    const baseCost = this.calculateBaseCost(estimate)
    const markupAmount = this.calculateMarkupAmount(estimate)
    return baseCost + markupAmount
  }

  static validateEstimate(estimate) {
    const errors = []

    if (!estimate) {
      errors.push('Estimate data is required')
      return errors
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã
    if (estimate.group) {
      const totalPax = this.safeNumber(estimate.group.totalPax, 0)
      if (totalPax <= 0) {
        errors.push('Total passengers must be greater than 0')
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Å—Ç–∏–Ω–∏—Ü
    if (estimate.hotels && Array.isArray(estimate.hotels)) {
      estimate.hotels.forEach((hotel, index) => {
        if (!hotel.name) {
          errors.push(`Hotel ${index + 1}: name is required`)
        }

        const paxCount = this.safeNumber(hotel.paxCount, 0)
        if (paxCount <= 0) {
          errors.push(`Hotel ${index + 1}: pax count must be greater than 0`)
        }

        const pricePerRoom = this.safeNumber(hotel.pricePerRoom, 0)
        if (pricePerRoom < 0) {
          errors.push(`Hotel ${index + 1}: price per room cannot be negative`)
        }
      })
    }

    return errors
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testAllEstimates() {
  console.log('üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–ú–ï–¢ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•')
  console.log('='.repeat(80))

  const results = {
    total: 0,
    passed: 0,
    failed: 0,
    errors: [],
    estimates: [],
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const estimates = await getEstimates()
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${estimates.length}`)

    if (estimates.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return results
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–º–µ—Ç—É
    for (const estimate of estimates) {
      results.total++
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã ID: ${estimate.id} - "${estimate.name}"`)

      const estimateResults = testEstimate(estimate)

      if (estimateResults.passed) {
        results.passed++
        console.log(`‚úÖ –°–º–µ—Ç–∞ ${estimate.id} –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã`)
      } else {
        results.failed++
        console.log(`‚ùå –°–º–µ—Ç–∞ ${estimate.id} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã`)
        results.errors.push({
          estimateId: estimate.id,
          estimateName: estimate.name,
          errors: estimateResults.errors,
        })
      }

      results.estimates.push({
        id: estimate.id,
        name: estimate.name,
        ...estimateResults,
      })
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    printResults(results)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message)
    results.errors.push({ type: 'system', error: error.message })
  }

  return results
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
function getEstimates() {
  return new Promise((resolve, reject) => {
    const query = `
      SELECT e.*, c.name as clientName 
      FROM estimates e 
      LEFT JOIN clients c ON e.clientId = c.id 
      ORDER BY e.createdAt DESC
    `

    db.all(query, [], (err, rows) => {
      if (err) {
        reject(err)
        return
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
      const estimates = rows.map((estimate) => ({
        ...estimate,
        location: estimate.location_data
          ? JSON.parse(estimate.location_data)
          : { country: '', regions: [], cities: [], startPoint: '', endPoint: '' },
        tourDates: estimate.tour_dates_data
          ? JSON.parse(estimate.tour_dates_data)
          : { dateType: 'exact', startDate: '', endDate: '', days: 0 },
        group: estimate.group_data
          ? JSON.parse(estimate.group_data)
          : { totalPax: 0, doubleCount: 0, singleCount: 0, guidesCount: 0, markup: 0 },
        hotels: estimate.hotels_data ? JSON.parse(estimate.hotels_data) : [],
        tourDays: estimate.tour_days_data ? JSON.parse(estimate.tour_days_data) : [],
        optionalServices: estimate.optional_services_data
          ? JSON.parse(estimate.optional_services_data)
          : [],
      }))

      resolve(estimates)
    })
  })
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å–º–µ—Ç—ã
 */
function testEstimate(estimate) {
  const results = {
    passed: true,
    errors: [],
    calculations: {},
  }

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    console.log(`  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...`)
    const structureErrors = validateEstimateStructure(estimate)
    if (structureErrors.length > 0) {
      results.errors.push(...structureErrors)
      results.passed = false
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log(`  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...`)
    const validationErrors = CalculationService.validateEstimate(estimate)
    if (validationErrors.length > 0) {
      results.errors.push(...validationErrors.map((err) => `Validation: ${err}`))
      results.passed = false
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    console.log(`  üßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤...`)
    const calculationResults = testCalculations(estimate)
    results.calculations = calculationResults

    if (calculationResults.errors.length > 0) {
      results.errors.push(...calculationResults.errors)
      results.passed = false
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log(`  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...`)
    const integrityErrors = testDataIntegrity(estimate)
    if (integrityErrors.length > 0) {
      results.errors.push(...integrityErrors)
      results.passed = false
    }
  } catch (error) {
    results.errors.push(`System error: ${error.message}`)
    results.passed = false
  }

  return results
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã
 */
function validateEstimateStructure(estimate) {
  const errors = []

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!estimate.name) {
    errors.push('Missing required field: name')
  }

  if (!estimate.id) {
    errors.push('Missing required field: id')
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  if (estimate.hotels && !Array.isArray(estimate.hotels)) {
    errors.push('Hotels must be an array')
  }

  if (estimate.tourDays && !Array.isArray(estimate.tourDays)) {
    errors.push('Tour days must be an array')
  }

  if (estimate.optionalServices && !Array.isArray(estimate.optionalServices)) {
    errors.push('Optional services must be an array')
  }

  return errors
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
 */
function testCalculations(estimate) {
  const results = {
    baseCost: 0,
    markupAmount: 0,
    finalCost: 0,
    errors: [],
  }

  try {
    // –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    results.baseCost = CalculationService.calculateBaseCost(estimate)

    // –†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏
    results.markupAmount = CalculationService.calculateMarkupAmount(estimate)

    // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    results.finalCost = CalculationService.calculateFinalCost(estimate)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (results.baseCost > 1000000) {
      results.errors.push(`Suspiciously high base cost: $${results.baseCost.toLocaleString()}`)
    }

    if (results.finalCost > 1000000) {
      results.errors.push(`Suspiciously high final cost: $${results.finalCost.toLocaleString()}`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
    const expectedFinalCost = results.baseCost + results.markupAmount
    if (Math.abs(results.finalCost - expectedFinalCost) > 0.01) {
      results.errors.push(
        `Final cost calculation mismatch: expected ${expectedFinalCost}, got ${results.finalCost}`,
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–µ–ª–µ–π
    if (estimate.hotels && Array.isArray(estimate.hotels)) {
      estimate.hotels.forEach((hotel, index) => {
        const hotelTotal = CalculationService.calculateHotelTotal(hotel)
        if (hotelTotal > 100000) {
          results.errors.push(
            `Hotel ${index + 1} has suspiciously high cost: $${hotelTotal.toLocaleString()}`,
          )
        }
      })
    }
  } catch (error) {
    results.errors.push(`Calculation error: ${error.message}`)
  }

  return results
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 */
function testDataIntegrity(estimate) {
  const errors = []

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–µ–ª–µ–π
  if (estimate.hotels && Array.isArray(estimate.hotels)) {
    estimate.hotels.forEach((hotel, index) => {
      if (!hotel.name) {
        errors.push(`Hotel ${index + 1}: missing name`)
      }

      if (!hotel.city) {
        errors.push(`Hotel ${index + 1}: missing city`)
      }

      if (!hotel.accommodationType) {
        errors.push(`Hotel ${index + 1}: missing accommodation type`)
      }

      if (hotel.paxCount <= 0) {
        errors.push(`Hotel ${index + 1}: invalid pax count (${hotel.paxCount})`)
      }

      if (hotel.pricePerRoom < 0) {
        errors.push(`Hotel ${index + 1}: negative price per room (${hotel.pricePerRoom})`)
      }

      if (hotel.nights <= 0) {
        errors.push(`Hotel ${index + 1}: invalid nights count (${hotel.nights})`)
      }
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ç—É—Ä–∞
  if (estimate.tourDays && Array.isArray(estimate.tourDays)) {
    estimate.tourDays.forEach((day, index) => {
      if (!day.city) {
        errors.push(`Tour day ${index + 1}: missing city`)
      }

      if (day.activities && Array.isArray(day.activities)) {
        day.activities.forEach((activity, actIndex) => {
          if (!activity.name) {
            errors.push(`Tour day ${index + 1}, activity ${actIndex + 1}: missing name`)
          }

          if (activity.cost < 0) {
            errors.push(
              `Tour day ${index + 1}, activity ${actIndex + 1}: negative cost (${activity.cost})`,
            )
          }
        })
      }
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã
  if (estimate.group) {
    if (estimate.group.totalPax <= 0) {
      errors.push('Group: invalid total passengers count')
    }

    if (estimate.group.markup < 0 || estimate.group.markup > 100) {
      errors.push(`Group: invalid markup percentage (${estimate.group.markup}%)`)
    }
  }

  return errors
}

/**
 * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function printResults(results) {
  console.log('\n' + '='.repeat(80))
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
  console.log('='.repeat(80))
  console.log(`–í—Å–µ–≥–æ —Å–º–µ—Ç: ${results.total}`)
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`)
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`)
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((results.passed / results.total) * 100).toFixed(1)}%`)

  if (results.errors.length > 0) {
    console.log('\nüö® –û–®–ò–ë–ö–ò –ü–û –°–ú–ï–¢–ê–ú:')
    results.errors.forEach(({ estimateId, estimateName, errors }) => {
      console.log(`\n–°–º–µ—Ç–∞ ${estimateId} - "${estimateName}":`)
      errors.forEach((error) => console.log(`  ‚ùå ${error}`))
    })
  }

  if (results.failed === 0) {
    console.log('\nüéâ –í–°–ï –°–ú–ï–¢–´ –ü–†–û–®–õ–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!')
  } else {
    console.log('\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï')
  }

  console.log('='.repeat(80))
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function main() {
  try {
    const results = await testAllEstimates()

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.close((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message)
      } else {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ')
      }
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(results.failed === 0 ? 0 : 1)
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main()
