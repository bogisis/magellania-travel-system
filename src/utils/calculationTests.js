// src/utils/calculationTests.js
// –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–º–µ—Ç

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
 */
export const testEstimateData = {
  // –ì—Ä—É–ø–ø–∞
  group: {
    totalPax: 8,
    doubleCount: 3,
    singleCount: 2,
    guidesCount: 1,
    markup: 15,
  },

  // –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã
  hotels: [
    {
      id: 'hotel-1',
      name: 'Hotel Alvear Palace',
      city: 'Buenos Aires',
      region: 'Buenos Aires',
      accommodationType: 'double',
      paxCount: 6,
      nights: 3,
      pricePerRoom: 250,
      isGuideHotel: false,
    },
    {
      id: 'hotel-2',
      name: 'Hotel Diplomatic',
      city: 'Buenos Aires',
      region: 'Buenos Aires',
      accommodationType: 'single',
      paxCount: 2,
      nights: 3,
      pricePerRoom: 180,
      isGuideHotel: true,
    },
  ],

  // –î–Ω–∏ —Ç—É—Ä–∞
  tourDays: [
    {
      id: 'day-1',
      dayNumber: 1,
      date: '2025-04-15',
      city: 'Buenos Aires',
      activities: [
        {
          id: 'activity-1',
          name: '–û–±–∑–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –≥–æ—Ä–æ–¥—É',
          description: '–ü–µ—à–µ—Ö–æ–¥–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É —Ü–µ–Ω—Ç—Ä—É',
          duration: '3 —á–∞—Å–∞',
          cost: 120,
        },
        {
          id: 'activity-2',
          name: '–¢–∞–Ω–≥–æ —à–æ—É',
          description: '–í–µ—á–µ—Ä–Ω–µ–µ —Ç–∞–Ω–≥–æ —à–æ—É —Å —É–∂–∏–Ω–æ–º',
          duration: '4 —á–∞—Å–∞',
          cost: 200,
        },
      ],
    },
  ],

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
  optionalServices: [
    {
      id: 'service-1',
      name: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞',
      description: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä',
      price: 80,
    },
  ],
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const calculationFunctions = {
  // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤
  calculateRooms: (hotel) => {
    if (!hotel.paxCount || !hotel.accommodationType) return 0

    switch (hotel.accommodationType) {
      case 'double':
        return Math.ceil(Number(hotel.paxCount) / 2)
      case 'triple':
        return Math.ceil(Number(hotel.paxCount) / 3)
      case 'single':
      default:
        return Number(hotel.paxCount)
    }
  },

  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã
  calculateHotelTotal: (hotel) => {
    const rooms = calculationFunctions.calculateRooms(hotel)
    return rooms * Number(hotel.pricePerRoom || 0) * Number(hotel.nights || 1)
  },

  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è
  calculateDayTotal: (day) => {
    if (!day.activities) return 0
    return day.activities.reduce((sum, activity) => sum + Number(activity.cost || 0), 0)
  },

  // –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  calculateBaseCost: (estimate) => {
    const hotelsCost = estimate.hotels
      .filter((hotel) => !hotel.isGuideHotel)
      .reduce((sum, hotel) => sum + calculationFunctions.calculateHotelTotal(hotel), 0)

    const activitiesCost = estimate.tourDays.reduce((sum, day) => {
      return sum + calculationFunctions.calculateDayTotal(day)
    }, 0)

    const optionalServicesCost = estimate.optionalServices.reduce((sum, service) => {
      return sum + Number(service.price || service.cost || 0)
    }, 0)

    return hotelsCost + activitiesCost + optionalServicesCost
  },

  // –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
  calculateMarginAmount: (estimate) => {
    const baseCost = calculationFunctions.calculateBaseCost(estimate)
    return (baseCost * Number(estimate.group.markup || 0)) / 100
  },

  // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  calculateFinalCost: (estimate) => {
    const baseCost = calculationFunctions.calculateBaseCost(estimate)
    const marginAmount = calculationFunctions.calculateMarginAmount(estimate)
    return baseCost + marginAmount
  },
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
 */
export function runCalculationTests() {
  console.log('üßÆ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤...')

  const results = {
    passed: 0,
    failed: 0,
    tests: [],
  }

  // –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤
  function testCalculateRooms() {
    const hotel1 = { accommodationType: 'double', paxCount: 6 }
    const hotel2 = { accommodationType: 'single', paxCount: 2 }
    const hotel3 = { accommodationType: 'triple', paxCount: 8 }

    const rooms1 = calculationFunctions.calculateRooms(hotel1)
    const rooms2 = calculationFunctions.calculateRooms(hotel2)
    const rooms3 = calculationFunctions.calculateRooms(hotel3)

    const expected1 = 3 // Math.ceil(6/2)
    const expected2 = 2 // 2 single rooms
    const expected3 = 3 // Math.ceil(8/3)

    const passed = rooms1 === expected1 && rooms2 === expected2 && rooms3 === expected3

    results.tests.push({
      name: '–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤',
      passed,
      details: {
        double: { expected: expected1, actual: rooms1 },
        single: { expected: expected2, actual: rooms2 },
        triple: { expected: expected3, actual: rooms3 },
      },
    })

    if (passed) {
      results.passed++
    } else {
      results.failed++
    }
  }

  // –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã
  function testCalculateHotelTotal() {
    const hotel = {
      accommodationType: 'double',
      paxCount: 6,
      pricePerRoom: 250,
      nights: 3,
    }

    const total = calculationFunctions.calculateHotelTotal(hotel)
    const expected = 3 * 250 * 3 // 3 rooms * $250 * 3 nights = $2250

    const passed = total === expected

    results.tests.push({
      name: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã',
      passed,
      details: { expected, actual: total },
    })

    if (passed) {
      results.passed++
    } else {
      results.failed++
    }
  }

  // –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è
  function testCalculateDayTotal() {
    const day = {
      activities: [{ cost: 120 }, { cost: 200 }],
    }

    const total = calculationFunctions.calculateDayTotal(day)
    const expected = 120 + 200 // $320

    const passed = total === expected

    results.tests.push({
      name: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è',
      passed,
      details: { expected, actual: total },
    })

    if (passed) {
      results.passed++
    } else {
      results.failed++
    }
  }

  // –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  function testCalculateBaseCost() {
    const baseCost = calculationFunctions.calculateBaseCost(testEstimateData)

    // –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
    // Hotel 1: 3 rooms * $250 * 3 nights = $2250 (–Ω–µ guide hotel)
    // Hotel 2: 2 rooms * $180 * 3 nights = $1080 (guide hotel, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)
    // Activities: $120 + $200 = $320
    // Optional services: $80
    // Total: $2250 + $320 + $80 = $2650

    const expected = 2250 + 320 + 80 // $2650

    const passed = Math.abs(baseCost - expected) < 0.01 // –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è

    results.tests.push({
      name: '–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      passed,
      details: { expected, actual: baseCost },
    })

    if (passed) {
      results.passed++
    } else {
      results.failed++
    }
  }

  // –¢–µ—Å—Ç 5: –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
  function testCalculateMarginAmount() {
    const marginAmount = calculationFunctions.calculateMarginAmount(testEstimateData)
    const baseCost = calculationFunctions.calculateBaseCost(testEstimateData)
    const expected = (baseCost * 15) / 100 // 15% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏

    const passed = Math.abs(marginAmount - expected) < 0.01

    results.tests.push({
      name: '–†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏',
      passed,
      details: { expected, actual: marginAmount },
    })

    if (passed) {
      results.passed++
    } else {
      results.failed++
    }
  }

  // –¢–µ—Å—Ç 6: –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  function testCalculateFinalCost() {
    const finalCost = calculationFunctions.calculateFinalCost(testEstimateData)
    const baseCost = calculationFunctions.calculateBaseCost(testEstimateData)
    const marginAmount = calculationFunctions.calculateMarginAmount(testEstimateData)
    const expected = baseCost + marginAmount

    const passed = Math.abs(finalCost - expected) < 0.01

    results.tests.push({
      name: '–†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      passed,
      details: { expected, actual: finalCost },
    })

    if (passed) {
      results.passed++
    } else {
      results.failed++
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  testCalculateRooms()
  testCalculateHotelTotal()
  testCalculateDayTotal()
  testCalculateBaseCost()
  testCalculateMarginAmount()
  testCalculateFinalCost()

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`)
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`)
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`)

  results.tests.forEach((test) => {
    const status = test.passed ? '‚úÖ' : '‚ùå'
    console.log(`${status} ${test.name}: ${test.passed ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`)
    if (!test.passed) {
      console.log(`   –î–µ—Ç–∞–ª–∏:`, test.details)
    }
  })

  return results
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ—Ç—ã
 */
export function validateEstimate(estimate) {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ç—ã:', estimate.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

  const baseCost = calculationFunctions.calculateBaseCost(estimate)
  const marginAmount = calculationFunctions.calculateMarginAmount(estimate)
  const finalCost = calculationFunctions.calculateFinalCost(estimate)

  console.log('üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', baseCost)
  console.log('üìà –ú–∞—Ä–∂–∞:', marginAmount)
  console.log('üíµ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', finalCost)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const warnings = []

  if (baseCost > 1000000) {
    warnings.push('–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞ (>$1M)')
  }

  if (finalCost > 1000000) {
    warnings.push('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞ (>$1M)')
  }

  if (baseCost < 0) {
    warnings.push('–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è')
  }

  if (finalCost < 0) {
    warnings.push('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è')
  }

  if (warnings.length > 0) {
    console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:')
    warnings.forEach((warning) => console.log('  -', warning))
  } else {
    console.log('‚úÖ –°–º–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É')
  }

  return {
    baseCost,
    marginAmount,
    finalCost,
    warnings,
  }
}
