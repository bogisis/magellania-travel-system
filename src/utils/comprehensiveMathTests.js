// src/utils/comprehensiveMathTests.js
// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤

import { CalculationService } from '@/services/CalculationService.js'

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
 */
export class ComprehensiveMathTests {
  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  static runAllTests() {
    console.log('üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–• –†–ê–°–ß–ï–¢–û–í')
    console.log('='.repeat(80))

    const results = {
      total: 0,
      passed: 0,
      failed: 0,
      errors: [],
    }

    // 1. –¢–µ—Å—Ç—ã –±–∞–∑–æ–≤—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    results.total += 5
    this.testBasicMathOperations(results)

    // 2. –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤
    results.total += 6
    this.testRoomCalculations(results)

    // 3. –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª–µ–π
    results.total += 8
    this.testHotelCostCalculations(results)

    // 4. –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω–µ–π —Ç—É—Ä–∞
    results.total += 6
    this.testTourDayCalculations(results)

    // 5. –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    results.total += 4
    this.testBaseCostCalculations(results)

    // 6. –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    results.total += 4
    this.testMarkupCalculations(results)

    // 7. –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    results.total += 4
    this.testFinalCostCalculations(results)

    // 8. –¢–µ—Å—Ç—ã edge cases
    results.total += 6
    this.testEdgeCases(results)

    // 9. –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    results.total += 4
    this.testDataValidation(results)

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.printResults(results)

    return results
  }

  /**
   * –¢–µ—Å—Ç—ã –±–∞–∑–æ–≤—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  static testBasicMathOperations(results) {
    console.log('\nüìä –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')

    try {
      // –¢–µ—Å—Ç safeNumber
      const test1 = CalculationService.safeNumber('100', 0) === 100
      this.assert(test1, 'safeNumber —Å —á–∏—Å–ª–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π', results)

      const test2 = CalculationService.safeNumber('abc', 0) === 0
      this.assert(test2, 'safeNumber —Å –Ω–µ—á–∏—Å–ª–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π', results)

      const test3 = CalculationService.safeNumber(null, 50) === 50
      this.assert(test3, 'safeNumber —Å null', results)

      const test4 = CalculationService.safeNumber(undefined, 25) === 25
      this.assert(test4, 'safeNumber —Å undefined', results)

      const test5 = CalculationService.safeNumber(75, 0) === 75
      this.assert(test5, 'safeNumber —Å —á–∏—Å–ª–æ–º', results)
    } catch (error) {
      this.handleError('–ë–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤
   */
  static testRoomCalculations(results) {
    console.log('\nüè® –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤')

    try {
      // –¢–µ—Å—Ç single
      const hotel1 = { paxCount: 5, accommodationType: 'single' }
      const test1 = CalculationService.calculateRooms(hotel1) === 5
      this.assert(test1, '–†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è single —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', results)

      // –¢–µ—Å—Ç double
      const hotel2 = { paxCount: 6, accommodationType: 'double' }
      const test2 = CalculationService.calculateRooms(hotel2) === 3
      this.assert(test2, '–†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è double —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—á–µ—Ç–Ω–æ–µ)', results)

      const hotel3 = { paxCount: 5, accommodationType: 'double' }
      const test3 = CalculationService.calculateRooms(hotel3) === 3
      this.assert(test3, '–†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è double —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–µ—á–µ—Ç–Ω–æ–µ)', results)

      // –¢–µ—Å—Ç triple
      const hotel4 = { paxCount: 7, accommodationType: 'triple' }
      const test4 = CalculationService.calculateRooms(hotel4) === 3
      this.assert(test4, '–†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è triple —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', results)

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const hotel5 = { paxCount: 'abc', accommodationType: 'double' }
      const test5 = CalculationService.calculateRooms(hotel5) === 0
      this.assert(test5, '–†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', results)

      const hotel6 = { accommodationType: 'double' }
      const test6 = CalculationService.calculateRooms(hotel6) === 0
      this.assert(test6, '–†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –±–µ–∑ paxCount', results)
    } catch (error) {
      this.handleError('–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª–µ–π
   */
  static testHotelCostCalculations(results) {
    console.log('\nüí∞ –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª–µ–π')

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
      const hotel1 = { paxCount: 2, accommodationType: 'double', pricePerRoom: 100, nights: 3 }
      const expected1 = 1 * 100 * 3 // 1 –Ω–æ–º–µ—Ä * 100$ * 3 –Ω–æ—á–∏
      const test1 = CalculationService.calculateHotelTotal(hotel1) === expected1
      this.assert(test1, '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è', results)

      // –¢–µ—Å—Ç —Å single —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
      const hotel2 = { paxCount: 3, accommodationType: 'single', pricePerRoom: 80, nights: 2 }
      const expected2 = 3 * 80 * 2 // 3 –Ω–æ–º–µ—Ä–∞ * 80$ * 2 –Ω–æ—á–∏
      const test2 = CalculationService.calculateHotelTotal(hotel2) === expected2
      this.assert(test2, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è —Å single —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º', results)

      // –¢–µ—Å—Ç —Å triple —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
      const hotel3 = { paxCount: 9, accommodationType: 'triple', pricePerRoom: 120, nights: 4 }
      const expected3 = 3 * 120 * 4 // 3 –Ω–æ–º–µ—Ä–∞ * 120$ * 4 –Ω–æ—á–∏
      const test3 = CalculationService.calculateHotelTotal(hotel3) === expected3
      this.assert(test3, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è —Å triple —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º', results)

      // –¢–µ—Å—Ç —Å –Ω–µ—á–µ—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—É—Ä–∏—Å—Ç–æ–≤
      const hotel4 = { paxCount: 7, accommodationType: 'double', pricePerRoom: 90, nights: 5 }
      const expected4 = 4 * 90 * 5 // 4 –Ω–æ–º–µ—Ä–∞ * 90$ * 5 –Ω–æ—á–µ–π
      const test4 = CalculationService.calculateHotelTotal(hotel4) === expected4
      this.assert(test4, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è —Å –Ω–µ—á–µ—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—É—Ä–∏—Å—Ç–æ–≤', results)

      // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const hotel5 = { paxCount: 0, accommodationType: 'double', pricePerRoom: 100, nights: 3 }
      const test5 = CalculationService.calculateHotelTotal(hotel5) === 0
      this.assert(test5, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—É—Ä–∏—Å—Ç–æ–≤', results)

      // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const hotel6 = { paxCount: 2, accommodationType: 'double' }
      const test6 = CalculationService.calculateHotelTotal(hotel6) === 0
      this.assert(test6, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è –±–µ–∑ —Ü–µ–Ω—ã –∏ –Ω–æ—á–µ–π', results)

      // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const hotel7 = { paxCount: 2, accommodationType: 'double', pricePerRoom: -50, nights: 3 }
      const test7 = CalculationService.calculateHotelTotal(hotel7) === 0
      this.assert(test7, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π', results)

      // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
      const hotel8 = { paxCount: 100, accommodationType: 'double', pricePerRoom: 1000, nights: 30 }
      const expected8 = 50 * 1000 * 30 // 50 –Ω–æ–º–µ—Ä–æ–≤ * 1000$ * 30 –Ω–æ—á–µ–π
      const test8 = CalculationService.calculateHotelTotal(hotel8) === expected8
      this.assert(test8, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏', results)
    } catch (error) {
      this.handleError('–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª–µ–π', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω–µ–π —Ç—É—Ä–∞
   */
  static testTourDayCalculations(results) {
    console.log('\nüìÖ –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω–µ–π —Ç—É—Ä–∞')

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
      const day1 = {
        activities: [{ cost: 50 }, { cost: 30 }, { cost: 20 }],
      }
      const expected1 = 50 + 30 + 20
      const test1 = CalculationService.calculateDayTotal(day1) === expected1
      this.assert(test1, '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è —Ç—É—Ä–∞', results)

      // –¢–µ—Å—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
      const day2 = { activities: [] }
      const test2 = CalculationService.calculateDayTotal(day2) === 0
      this.assert(test2, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', results)

      // –¢–µ—Å—Ç —Å –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      const day3 = { activities: [{ cost: 100 }] }
      const test3 = CalculationService.calculateDayTotal(day3) === 100
      this.assert(test3, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è —Å –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é', results)

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const day4 = { activities: [{ cost: 'abc' }, { cost: 50 }] }
      const test4 = CalculationService.calculateDayTotal(day4) === 50
      this.assert(test4, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', results)

      // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const day5 = { activities: [{ cost: -20 }, { cost: 30 }] }
      const test5 = CalculationService.calculateDayTotal(day5) === 30
      this.assert(test5, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏', results)

      // –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
      const day6 = { activities: [{ cost: 1000 }, { cost: 2000 }, { cost: 3000 }] }
      const expected6 = 1000 + 2000 + 3000
      const test6 = CalculationService.calculateDayTotal(day6) === expected6
      this.assert(test6, '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏', results)
    } catch (error) {
      this.handleError('–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω–µ–π —Ç—É—Ä–∞', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  static testBaseCostCalculations(results) {
    console.log('\nüíµ –¢–µ—Å—Ç 5: –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏')

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
      const estimate1 = {
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [{ activities: [{ cost: 50 }, { cost: 30 }] }],
      }
      const expected1 = 1 * 100 * 3 + (50 + 30) // –æ—Ç–µ–ª—å + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const test1 = CalculationService.calculateBaseCost(estimate1) === expected1
      this.assert(test1, '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏', results)

      // –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–µ–ª—è–º–∏
      const estimate2 = {
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
          {
            paxCount: 1,
            accommodationType: 'single',
            pricePerRoom: 80,
            nights: 2,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const expected2 = 1 * 100 * 3 + 1 * 80 * 2
      const test2 = CalculationService.calculateBaseCost(estimate2) === expected2
      this.assert(test2, '–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–µ–ª—è–º–∏', results)

      // –¢–µ—Å—Ç —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º guide hotels
      const estimate3 = {
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
          {
            paxCount: 1,
            accommodationType: 'single',
            pricePerRoom: 80,
            nights: 2,
            isGuideHotel: true,
          },
        ],
        tourDays: [],
      }
      const expected3 = 1 * 100 * 3 // —Ç–æ–ª—å–∫–æ –Ω–µ-guide –æ—Ç–µ–ª—å
      const test3 = CalculationService.calculateBaseCost(estimate3) === expected3
      this.assert(test3, '–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º guide hotels', results)

      // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const estimate4 = { hotels: [], tourDays: [] }
      const test4 = CalculationService.calculateBaseCost(estimate4) === 0
      this.assert(test4, '–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', results)
    } catch (error) {
      this.handleError('–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
   */
  static testMarkupCalculations(results) {
    console.log('\nüìà –¢–µ—Å—Ç 6: –†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏')

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
      const estimate1 = {
        markup: 15,
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const baseCost1 = 1 * 100 * 3
      const expected1 = (baseCost1 * 15) / 100
      const test1 = CalculationService.calculateMarkupAmount(estimate1) === expected1
      this.assert(test1, '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏', results)

      // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
      const estimate2 = {
        markup: 0,
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const test2 = CalculationService.calculateMarkupAmount(estimate2) === 0
      this.assert(test2, '–†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º', results)

      // –¢–µ—Å—Ç —Å –±–æ–ª—å—à–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
      const estimate3 = {
        markup: 50,
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const baseCost3 = 1 * 100 * 3
      const expected3 = (baseCost3 * 50) / 100
      const test3 = CalculationService.calculateMarkupAmount(estimate3) === expected3
      this.assert(test3, '–†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ —Å –±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º', results)

      // –¢–µ—Å—Ç –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏
      const estimate4 = {
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const test4 = CalculationService.calculateMarkupAmount(estimate4) === 0
      this.assert(test4, '–†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞', results)
    } catch (error) {
      this.handleError('–†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  static testFinalCostCalculations(results) {
    console.log('\nüéØ –¢–µ—Å—Ç 7: –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏')

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
      const estimate1 = {
        markup: 15,
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const baseCost1 = 1 * 100 * 3
      const markup1 = (baseCost1 * 15) / 100
      const expected1 = baseCost1 + markup1
      const test1 = CalculationService.calculateFinalCost(estimate1) === expected1
      this.assert(test1, '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏', results)

      // –¢–µ—Å—Ç –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏
      const estimate2 = {
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const baseCost2 = 1 * 100 * 3
      const test2 = CalculationService.calculateFinalCost(estimate2) === baseCost2
      this.assert(test2, '–†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏', results)

      // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
      const estimate3 = {
        markup: 0,
        hotels: [
          {
            paxCount: 2,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
            isGuideHotel: false,
          },
        ],
        tourDays: [],
      }
      const baseCost3 = 1 * 100 * 3
      const test3 = CalculationService.calculateFinalCost(estimate3) === baseCost3
      this.assert(test3, '–†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –Ω—É–ª–µ–≤–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π', results)

      // –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
      const estimate4 = {
        markup: 25,
        hotels: [
          {
            paxCount: 10,
            accommodationType: 'double',
            pricePerRoom: 500,
            nights: 7,
            isGuideHotel: false,
          },
        ],
        tourDays: [{ activities: [{ cost: 1000 }] }],
      }
      const baseCost4 = 5 * 500 * 7 + 1000
      const markup4 = (baseCost4 * 25) / 100
      const expected4 = baseCost4 + markup4
      const test4 = CalculationService.calculateFinalCost(estimate4) === expected4
      this.assert(test4, '–†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏', results)
    } catch (error) {
      this.handleError('–†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã edge cases
   */
  static testEdgeCases(results) {
    console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç 8: Edge cases')

    try {
      // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
      const hotel1 = {
        paxCount: 1000,
        accommodationType: 'double',
        pricePerRoom: 10000,
        nights: 365,
      }
      const test1 = !isNaN(CalculationService.calculateHotelTotal(hotel1))
      this.assert(test1, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª', results)

      // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∏—Å–ª–∞–º–∏
      const hotel2 = { paxCount: 1, accommodationType: 'single', pricePerRoom: 0.01, nights: 1 }
      const test2 = CalculationService.calculateHotelTotal(hotel2) === 0.01
      this.assert(test2, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª', results)

      // –¢–µ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const hotel3 = {
        paxCount: Number.MAX_SAFE_INTEGER,
        accommodationType: 'single',
        pricePerRoom: 1,
        nights: 1,
      }
      const test3 = !isNaN(CalculationService.calculateHotelTotal(hotel3))
      this.assert(test3, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π', results)

      // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const hotel4 = { paxCount: -5, accommodationType: 'double', pricePerRoom: 100, nights: 3 }
      const test4 = CalculationService.calculateHotelTotal(hotel4) === 0
      this.assert(test4, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π', results)

      // –¢–µ—Å—Ç —Å undefined –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const hotel5 = {
        paxCount: undefined,
        accommodationType: 'double',
        pricePerRoom: 100,
        nights: 3,
      }
      const test5 = CalculationService.calculateHotelTotal(hotel5) === 0
      this.assert(test5, '–û–±—Ä–∞–±–æ—Ç–∫–∞ undefined –∑–Ω–∞—á–µ–Ω–∏–π', results)

      // –¢–µ—Å—Ç —Å null –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const hotel6 = { paxCount: null, accommodationType: 'double', pricePerRoom: 100, nights: 3 }
      const test6 = CalculationService.calculateHotelTotal(hotel6) === 0
      this.assert(test6, '–û–±—Ä–∞–±–æ—Ç–∫–∞ null –∑–Ω–∞—á–µ–Ω–∏–π', results)
    } catch (error) {
      this.handleError('Edge cases', error, results)
    }
  }

  /**
   * –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  static testDataValidation(results) {
    console.log('\n‚úÖ –¢–µ—Å—Ç 9: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö')

    try {
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å–º–µ—Ç—ã
      const estimate1 = {
        group: { totalPax: 5 },
        hotels: [
          {
            name: 'Hotel A',
            paxCount: 5,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
          },
        ],
      }
      const test1 = CalculationService.validateEstimate(estimate1).length === 0
      this.assert(test1, '–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–º–µ—Ç—ã', results)

      // –¢–µ—Å—Ç —Å–º–µ—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø—ã
      const estimate2 = {
        hotels: [
          {
            name: 'Hotel A',
            paxCount: 5,
            accommodationType: 'double',
            pricePerRoom: 100,
            nights: 3,
          },
        ],
      }
      const test2 = CalculationService.validateEstimate(estimate2).length > 0
      this.assert(test2, '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–º–µ—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø—ã', results)

      // –¢–µ—Å—Ç —Å–º–µ—Ç—ã —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–µ–ª—è
      const estimate3 = {
        group: { totalPax: 5 },
        hotels: [{ name: '', paxCount: 0, pricePerRoom: -50 }],
      }
      const test3 = CalculationService.validateEstimate(estimate3).length > 0
      this.assert(test3, '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–º–µ—Ç—ã —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–µ–ª—è', results)

      // –¢–µ—Å—Ç –ø—É—Å—Ç–æ–π —Å–º–µ—Ç—ã
      const estimate4 = {}
      const test4 = CalculationService.validateEstimate(estimate4).length > 0
      this.assert(test4, '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–π —Å–º–µ—Ç—ã', results)
    } catch (error) {
      this.handleError('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', error, results)
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  static assert(condition, testName, results) {
    if (condition) {
      results.passed++
      console.log(`‚úÖ ${testName}`)
    } else {
      results.failed++
      console.log(`‚ùå ${testName}`)
    }
  }

  static handleError(testName, error, results) {
    results.failed++
    results.errors.push({ test: testName, error: error.message })
    console.log(`‚ùå ${testName}: ${error.message}`)
  }

  static printResults(results) {
    console.log('\n' + '='.repeat(80))
    console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('='.repeat(80))
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.total}`)
    console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`)
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`)
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((results.passed / results.total) * 100).toFixed(1)}%`)

    if (results.errors.length > 0) {
      console.log('\nüö® –û–®–ò–ë–ö–ò:')
      results.errors.forEach(({ test, error }) => {
        console.log(`  ${test}: ${error}`)
      })
    }

    if (results.failed === 0) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
    } else {
      console.log('\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï')
    }

    console.log('='.repeat(80))
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export function runComprehensiveMathTests() {
  return ComprehensiveMathTests.runAllTests()
}
