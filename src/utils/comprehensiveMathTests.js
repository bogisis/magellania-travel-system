/**
 * Comprehensive mathematical tests for MAGELLANIA calculation engine
 *
 * Tests all calculation types and scenarios based on real estimate analysis
 */

import { CalculationEngine } from '../services/CalculationEngine.js'
import { PricingIntelligenceService } from '../services/PricingIntelligenceService.js'

/**
 * Test data based on real estimates analysis
 */
export const testScenarios = {
  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã (per_person)
  entranceTickets: {
    name: '–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤ –Ω–∞—Ü.–ø–∞—Ä–∫',
    activities: [
      {
        name: '–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤ –Ω–∞—Ü.–ø–∞—Ä–∫',
        base_price: 44,
        calculation_type: CalculationEngine.CALCULATION_TYPES.PER_PERSON,
        markup: 10,
      },
    ],
    participantCount: 5,
    expectedBaseCost: 220, // 5 √ó $44
    expectedWithMarkup: 242, // 220 + 10%
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã (per_group)
  transfers: {
    name: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã',
    activities: [
      {
        name: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É',
        base_price: 40,
        calculation_type: CalculationEngine.CALCULATION_TYPES.PER_GROUP,
        markup: 15,
      },
    ],
    participantCount: 5,
    expectedBaseCost: 40, // 1 √ó $40
    expectedWithMarkup: 46, // 40 + 15%
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤
  accommodation: {
    name: '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ',
    hotels: [
      {
        name: 'Hotel Austral Plaza',
        accommodationType: 'double',
        pricePerRoom: 150,
        nights: 4,
        markup: 10,
      },
    ],
    participantCount: 5,
    expectedRooms: 3, // Math.ceil(5/2)
    expectedBaseCost: 1800, // 3 √ó $150 √ó 4
    expectedWithMarkup: 1980, // 1800 + 10%
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
  differentialPricing: {
    name: '–ë–∏–ª–µ—Ç—ã –Ω–∞ –ø–æ–µ–∑–¥',
    pricing: {
      adult_price: 70,
      child_price: 35,
      markup: 10,
    },
    adultCount: 5,
    childCount: 3,
    expectedAdultCost: 350, // 5 √ó $70
    expectedChildCost: 105, // 3 √ó $35
    expectedTotal: 455, // 350 + 105
    expectedWithMarkup: 500.5, // 455 + 10%
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 5: –†–∞–±–æ—Ç–∞ –≥–∏–¥–∞ (per_day)
  guideWork: {
    name: '–†–∞–±–æ—Ç–∞ –≥–∏–¥–∞',
    activities: [
      {
        name: '–†–∞–±–æ—Ç–∞ –≥–∏–¥–∞',
        base_price: 350,
        calculation_type: CalculationEngine.CALCULATION_TYPES.PER_DAY,
        markup: 10,
      },
    ],
    days: 18,
    participantCount: 5,
    expectedBaseCost: 6300, // 18 √ó $350
    expectedWithMarkup: 6930, // 6300 + 10%
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 6: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–º–µ—Ç–∞
  complexEstimate: {
    name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–º–µ—Ç–∞',
    estimate: {
      group: {
        totalPax: 5,
        markup: 10,
      },
      hotels: [
        {
          name: 'Hotel Austral Plaza',
          accommodationType: 'double',
          pricePerRoom: 150,
          nights: 4,
          markup: 10,
        },
      ],
      tourDays: [
        {
          dayNumber: 1,
          activities: [
            {
              name: '–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤ –Ω–∞—Ü.–ø–∞—Ä–∫',
              base_price: 44,
              calculation_type: CalculationEngine.CALCULATION_TYPES.PER_PERSON,
              markup: 10,
            },
            {
              name: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä',
              base_price: 40,
              calculation_type: CalculationEngine.CALCULATION_TYPES.PER_GROUP,
              markup: 15,
            },
          ],
        },
      ],
      optionalServices: [
        {
          name: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
          price: 25,
          calculation_type: CalculationEngine.CALCULATION_TYPES.PER_PERSON,
          markup: 5,
        },
      ],
    },
  },
}

/**
 * Run comprehensive mathematical tests
 */
export function runComprehensiveTests() {
  console.log('üßÆ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...\n')

  const results = {
    passed: 0,
    failed: 0,
    tests: [],
  }

  // –¢–µ—Å—Ç 1: –í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã (per_person)
  testEntranceTickets(results)

  // –¢–µ—Å—Ç 2: –¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã (per_group)
  testTransfers(results)

  // –¢–µ—Å—Ç 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
  testAccommodation(results)

  // –¢–µ—Å—Ç 4: –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
  testDifferentialPricing(results)

  // –¢–µ—Å—Ç 5: –†–∞–±–æ—Ç–∞ –≥–∏–¥–∞ (per_day)
  testGuideWork(results)

  // –¢–µ—Å—Ç 6: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–º–µ—Ç–∞
  testComplexEstimate(results)

  // –¢–µ—Å—Ç 7: –î–≤–æ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  testDualDisplayMode(results)

  // –¢–µ—Å—Ç 8: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
  testPricingIntelligence(results)

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`)
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`)
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`)
  console.log(
    `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((results.passed / (results.passed + results.failed)) * 100).toFixed(1)}%`,
  )

  return results
}

/**
 * Test entrance tickets calculation (per_person)
 */
function testEntranceTickets(results) {
  const testName = '–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã (per_person)'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.entranceTickets
    const activity = scenario.activities[0]
    const participantCount = scenario.participantCount

    // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    const baseCalculation = CalculationEngine.calculateActivityPrice(activity, participantCount, 0)

    // –¢–µ—Å—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    const markupCalculation = CalculationEngine.calculateActivityPrice(
      activity,
      participantCount,
      activity.markup,
    )

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    const baseCostCorrect = Math.abs(baseCalculation.subtotal - scenario.expectedBaseCost) < 0.01
    const markupCostCorrect = Math.abs(markupCalculation.total - scenario.expectedWithMarkup) < 0.01

    if (baseCostCorrect && markupCostCorrect) {
      console.log(
        `  ‚úÖ –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç: $${baseCalculation.subtotal} (–æ–∂–∏–¥–∞–ª–æ—Å—å $${scenario.expectedBaseCost})`,
      )
      console.log(
        `  ‚úÖ –†–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π: $${markupCalculation.total} (–æ–∂–∏–¥–∞–ª–æ—Å—å $${scenario.expectedWithMarkup})`,
      )
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö`)
      console.log(`     –ë–∞–∑–æ–≤—ã–π: $${baseCalculation.subtotal} vs $${scenario.expectedBaseCost}`)
      console.log(`     –° –Ω–∞—Ü–µ–Ω–∫–æ–π: $${markupCalculation.total} vs $${scenario.expectedWithMarkup}`)
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: baseCostCorrect && markupCostCorrect,
      details: { baseCalculation, markupCalculation },
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test transfers calculation (per_group)
 */
function testTransfers(results) {
  const testName = '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã (per_group)'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.transfers
    const activity = scenario.activities[0]
    const participantCount = scenario.participantCount

    const baseCalculation = CalculationEngine.calculateActivityPrice(activity, participantCount, 0)

    const markupCalculation = CalculationEngine.calculateActivityPrice(
      activity,
      participantCount,
      activity.markup,
    )

    const baseCostCorrect = Math.abs(baseCalculation.subtotal - scenario.expectedBaseCost) < 0.01
    const markupCostCorrect = Math.abs(markupCalculation.total - scenario.expectedWithMarkup) < 0.01

    if (baseCostCorrect && markupCostCorrect) {
      console.log(
        `  ‚úÖ –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç: $${baseCalculation.subtotal} (–æ–∂–∏–¥–∞–ª–æ—Å—å $${scenario.expectedBaseCost})`,
      )
      console.log(
        `  ‚úÖ –†–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π: $${markupCalculation.total} (–æ–∂–∏–¥–∞–ª–æ—Å—å $${scenario.expectedWithMarkup})`,
      )
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö`)
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: baseCostCorrect && markupCostCorrect,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test accommodation with room rounding
 */
function testAccommodation(results) {
  const testName = '–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.accommodation
    const hotel = scenario.hotels[0]
    const participantCount = scenario.participantCount

    // –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤
    const roomsNeeded = CalculationEngine.calculateRoomsNeeded(
      participantCount,
      hotel.accommodationType,
    )

    // –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    const accommodationCalculation = CalculationEngine.calculateAccommodation(
      hotel,
      participantCount,
      true,
    )

    const roomsCorrect = roomsNeeded === scenario.expectedRooms
    const costCorrect =
      Math.abs(accommodationCalculation.total - scenario.expectedWithMarkup) < 0.01

    if (roomsCorrect && costCorrect) {
      console.log(`  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤: ${roomsNeeded} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${scenario.expectedRooms})`)
      console.log(
        `  ‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${accommodationCalculation.total} (–æ–∂–∏–¥–∞–ª–æ—Å—å $${scenario.expectedWithMarkup})`,
      )
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö`)
      console.log(`     –ù–æ–º–µ—Ä–∞: ${roomsNeeded} vs ${scenario.expectedRooms}`)
      console.log(
        `     –°—Ç–æ–∏–º–æ—Å—Ç—å: $${accommodationCalculation.total} vs $${scenario.expectedWithMarkup}`,
      )
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: roomsCorrect && costCorrect,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test differential pricing (adults/children)
 */
function testDifferentialPricing(results) {
  const testName = '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–≤–∑—Ä–æ—Å–ª—ã–µ/–¥–µ—Ç–∏)'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.differentialPricing
    const pricing = scenario.pricing
    const adultCount = scenario.adultCount
    const childCount = scenario.childCount

    const differentialCalculation = CalculationEngine.calculateDifferentialPricing(
      pricing,
      adultCount,
      childCount,
      CalculationEngine.DISPLAY_MODES.WITH_MARKUP,
    )

    const adultCostCorrect =
      Math.abs(differentialCalculation.adult_base_cost - scenario.expectedAdultCost) < 0.01
    const childCostCorrect =
      Math.abs(differentialCalculation.child_base_cost - scenario.expectedChildCost) < 0.01
    const totalCorrect =
      Math.abs(differentialCalculation.total_with_markup - scenario.expectedWithMarkup) < 0.01

    if (adultCostCorrect && childCostCorrect && totalCorrect) {
      console.log(`  ‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö: $${differentialCalculation.adult_base_cost}`)
      console.log(`  ‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ç–µ–π: $${differentialCalculation.child_base_cost}`)
      console.log(`  ‚úÖ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${differentialCalculation.total_with_markup}`)
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö`)
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: adultCostCorrect && childCostCorrect && totalCorrect,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test guide work calculation (per_day)
 */
function testGuideWork(results) {
  const testName = '–†–∞–±–æ—Ç–∞ –≥–∏–¥–∞ (per_day)'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.guideWork
    const activity = scenario.activities[0]
    const days = scenario.days

    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π
    const activityWithDays = {
      ...activity,
      quantity: days,
    }

    const calculation = CalculationEngine.calculateActivityPrice(
      activityWithDays,
      scenario.participantCount,
      activity.markup,
    )

    const costCorrect = Math.abs(calculation.total - scenario.expectedWithMarkup) < 0.01

    if (costCorrect) {
      console.log(
        `  ‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≥–∏–¥–∞: $${calculation.total} (–æ–∂–∏–¥–∞–ª–æ—Å—å $${scenario.expectedWithMarkup})`,
      )
      results.passed++
    } else {
      console.log(
        `  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: $${calculation.total} vs $${scenario.expectedWithMarkup}`,
      )
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: costCorrect,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test complex estimate calculation
 */
function testComplexEstimate(results) {
  const testName = '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–º–µ—Ç–∞'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.complexEstimate
    const estimate = scenario.estimate

    const calculation = CalculationEngine.calculateEstimateTotalDual(
      estimate,
      CalculationEngine.DISPLAY_MODES.WITH_MARKUP,
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    const hasCategorySubtotals = calculation.category_subtotals
    const hasBaseTotal = calculation.base_total > 0
    const hasGeneralMarkup = calculation.general_markup_amount > 0
    const hasFinalTotal = calculation.final_total > 0

    if (hasCategorySubtotals && hasBaseTotal && hasGeneralMarkup && hasFinalTotal) {
      console.log(`  ‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${calculation.base_total}`)
      console.log(`  ‚úÖ –û–±—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: $${calculation.general_markup_amount}`)
      console.log(`  ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${calculation.final_total}`)
      console.log(`  ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${Object.keys(calculation.category_subtotals).join(', ')}`)
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ`)
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: hasCategorySubtotals && hasBaseTotal && hasGeneralMarkup && hasFinalTotal,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test dual display mode
 */
function testDualDisplayMode(results) {
  const testName = '–î–≤–æ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    const scenario = testScenarios.entranceTickets
    const activity = scenario.activities[0]
    const participantCount = scenario.participantCount

    // –¢–µ—Å—Ç –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏
    const withoutMarkup = CalculationEngine.calculateActivityPriceDual(
      activity,
      participantCount,
      CalculationEngine.DISPLAY_MODES.WITHOUT_MARKUP,
    )

    // –¢–µ—Å—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    const withMarkup = CalculationEngine.calculateActivityPriceDual(
      activity,
      participantCount,
      CalculationEngine.DISPLAY_MODES.WITH_MARKUP,
    )

    const basePriceCorrect =
      Math.abs(withoutMarkup.display_price - scenario.expectedBaseCost) < 0.01
    const markupPriceCorrect =
      Math.abs(withMarkup.display_price - scenario.expectedWithMarkup) < 0.01
    const hasBothPrices = withoutMarkup.base_price && withMarkup.price_with_markup

    if (basePriceCorrect && markupPriceCorrect && hasBothPrices) {
      console.log(`  ‚úÖ –ë–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏: $${withoutMarkup.display_price}`)
      console.log(`  ‚úÖ –° –Ω–∞—Ü–µ–Ω–∫–æ–π: $${withMarkup.display_price}`)
      console.log(`  ‚úÖ –û–±–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –¥–≤–æ–π–Ω–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏`)
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: basePriceCorrect && markupPriceCorrect && hasBothPrices,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

/**
 * Test pricing intelligence
 */
function testPricingIntelligence(results) {
  const testName = '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω'
  console.log(`\nüîç –¢–µ—Å—Ç: ${testName}`)

  try {
    // –¢–µ—Å—Ç 1: –í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã
    const entranceSuggestion = PricingIntelligenceService.suggestPricing(
      '–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤ –Ω–∞—Ü.–ø–∞—Ä–∫',
      'entrance',
      5,
    )

    // –¢–µ—Å—Ç 2: –¢—Ä–∞–Ω—Å—Ñ–µ—Ä
    const transferSuggestion = PricingIntelligenceService.suggestPricing(
      '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É',
      'transfer',
      5,
    )

    const entranceValid = entranceSuggestion.suggested && entranceSuggestion.confidence > 0.5
    const transferValid = transferSuggestion.suggested && transferSuggestion.confidence > 0.5
    const hasCorrectTypes =
      entranceSuggestion.calculation_type && transferSuggestion.calculation_type

    if (entranceValid && transferValid && hasCorrectTypes) {
      console.log(
        `  ‚úÖ –í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã: ${entranceSuggestion.calculation_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${entranceSuggestion.confidence})`,
      )
      console.log(
        `  ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä: ${transferSuggestion.calculation_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${transferSuggestion.confidence})`,
      )
      results.passed++
    } else {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö`)
      results.failed++
    }

    results.tests.push({
      name: testName,
      passed: entranceValid && transferValid && hasCorrectTypes,
    })
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    results.failed++
    results.tests.push({
      name: testName,
      passed: false,
      error: error.message,
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  runComprehensiveTests,
  testScenarios,
}
